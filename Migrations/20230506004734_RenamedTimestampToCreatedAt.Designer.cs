// <auto-generated />
using System;
using BackendTestTask.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendTestTask.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230506004734_RenamedTimestampToCreatedAt")]
    partial class RenamedTimestampToCreatedAt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackendTestTask.Data.Models.JournalItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestQueryString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("JournalItem");
                });

            modelBuilder.Entity("BackendTestTask.Data.Models.Node", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentNodeID")
                        .HasColumnType("int");

                    b.Property<int>("TreeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ParentNodeID");

                    b.HasIndex("TreeID");

                    b.ToTable("Node");
                });

            modelBuilder.Entity("BackendTestTask.Data.Models.Tree", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Tree");
                });

            modelBuilder.Entity("BackendTestTask.Data.Models.Node", b =>
                {
                    b.HasOne("BackendTestTask.Data.Models.Node", "ParentNode")
                        .WithMany("Children")
                        .HasForeignKey("ParentNodeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BackendTestTask.Data.Models.Tree", "Tree")
                        .WithMany("Children")
                        .HasForeignKey("TreeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentNode");

                    b.Navigation("Tree");
                });

            modelBuilder.Entity("BackendTestTask.Data.Models.Node", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("BackendTestTask.Data.Models.Tree", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
